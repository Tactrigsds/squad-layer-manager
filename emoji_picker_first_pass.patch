Subject: [PATCH] emoji picker first pass
---
Index: src/components/EMOJI_PICKER_README.md
===================================================================
diff --git a/src/components/EMOJI_PICKER_README.md b/src/components/EMOJI_PICKER_README.md
new file mode 100644
--- /dev/null	(revision 0426e9da1be28eb0123d8ece32694cbea490fbc3)
+++ b/src/components/EMOJI_PICKER_README.md	(revision 0426e9da1be28eb0123d8ece32694cbea490fbc3)
@@ -0,0 +1,120 @@
+# Emoji Picker Components
+
+This directory contains two emoji picker components for selecting Discord guild emojis.
+
+## Components
+
+### `EmojiPicker`
+A command palette-style picker with a searchable list view.
+
+**Best for:** Forms where space is limited and text search is preferred.
+
+```tsx
+import { EmojiPicker } from '@/components/emoji-picker'
+
+function MyComponent() {
+  const [emoji, setEmoji] = useState<string | undefined>()
+
+  return (
+    <EmojiPicker
+      value={emoji}
+      onSelect={setEmoji}
+      allowEmpty
+      placeholder="Select an emoji..."
+    />
+  )
+}
+```
+
+### `EmojiPickerGrid`
+A visual grid-based picker showing emoji images in a grid layout.
+
+**Best for:** Visual selection where users prefer to browse emojis by appearance.
+
+```tsx
+import { EmojiPickerGrid } from '@/components/emoji-picker-grid'
+
+function MyComponent() {
+  const [emoji, setEmoji] = useState<string | undefined>()
+
+  return (
+    <EmojiPickerGrid
+      value={emoji}
+      onSelect={setEmoji}
+      allowEmpty
+      displaySize={64}
+    />
+  )
+}
+```
+
+## Props
+
+### Common Props
+
+| Prop | Type | Default | Description |
+|------|------|---------|-------------|
+| `value` | `string \| undefined` | - | Currently selected emoji ID |
+| `onSelect` | `(emojiId: string \| undefined) => void` | - | Callback when emoji is selected |
+| `className` | `string` | - | Additional CSS classes for the trigger button |
+| `disabled` | `boolean` | `false` | Disable the picker |
+| `placeholder` | `string` | `'Select emoji...'` | Placeholder text when no emoji selected |
+| `allowEmpty` | `boolean` | `false` | Allow clearing the selection |
+| `size` | `number` | `32` (list), `48` (grid) | Size of emoji images to fetch from Discord |
+
+### EmojiPickerGrid Only
+
+| Prop | Type | Default | Description |
+|------|------|---------|-------------|
+| `displaySize` | `number` | `64` | Size of emojis displayed in the grid |
+
+## Features
+
+- **Live Search**: Filter emojis by ID in real-time
+- **Visual Feedback**: Selected emoji is highlighted
+- **Loading States**: Shows spinner while fetching emojis
+- **Empty State**: Optional "None" option to clear selection
+- **Responsive**: Works on mobile and desktop
+- **Accessible**: Uses proper ARIA attributes and keyboard navigation
+
+## Example Usage
+
+See `emoji-picker-example.tsx` for a comprehensive demo of both components with various configurations.
+
+## Data Source
+
+Both components fetch emojis from the Discord API via the `discord.client.ts` system, which provides:
+- `getEmojisBaseQuery`: Fetches all guild emojis
+- `getEmojiBaseQuery`: Fetches a single emoji by ID
+
+The components use React Query for efficient caching and automatic refetching.
+
+## Styling
+
+Both components use shadcn/ui primitives and follow the project's design system:
+- `Popover` for the dropdown
+- `Command` for the searchable list (EmojiPicker)
+- `Button` for the trigger
+- `Input` for search (EmojiPickerGrid)
+- `ScrollArea` for scrollable content
+
+## Performance
+
+- Emojis are fetched once and cached by React Query
+- Search filtering happens client-side for instant results
+- Grid layout uses CSS Grid for efficient rendering
+- Images are lazy-loaded by the browser
+
+## Customization
+
+You can customize the appearance by:
+1. Passing `className` prop to style the trigger button
+2. Modifying the `size` prop to change image resolution
+3. Adjusting `displaySize` (grid only) to change visual size
+4. Setting custom `placeholder` text
+
+## Notes
+
+- The emoji IDs correspond to Discord's guild emoji IDs
+- Emoji URLs are generated by the `getMiniGuildEmoji` function in `discord.models.ts`
+- Both components support controlled state pattern only (no internal state management)
Index: src/components/app-container.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/app-container.tsx b/src/components/app-container.tsx
--- a/src/components/app-container.tsx	(revision d1b80a7d5ed84416d5b228214cab11d3512be9d7)
+++ b/src/components/app-container.tsx	(revision 0426e9da1be28eb0123d8ece32694cbea490fbc3)
@@ -121,7 +121,7 @@
 									style={{ backgroundColor: user.displayHexColor ?? undefined }}
 									className="hover:cursor-pointer select-none h-8 w-8 sm:h-10 sm:w-10 flex-shrink-0"
 								>
-									<AvatarImage src={avatarUrl} />
+									<AvatarImage src={avatarUrl} crossOrigin="anonymous" />
 									<AvatarFallback className="text-xs sm:text-sm">{user.displayName.slice(0, 2).toUpperCase()}</AvatarFallback>
 								</Avatar>
 							</DropdownMenuTrigger>
Index: src/components/emoji-picker-example.tsx
===================================================================
diff --git a/src/components/emoji-picker-example.tsx b/src/components/emoji-picker-example.tsx
new file mode 100644
--- /dev/null	(revision 0426e9da1be28eb0123d8ece32694cbea490fbc3)
+++ b/src/components/emoji-picker-example.tsx	(revision 0426e9da1be28eb0123d8ece32694cbea490fbc3)
@@ -0,0 +1,153 @@
+import * as DiscordClient from '@/systems.client/discord.client'
+import { useQuery } from '@tanstack/react-query'
+import { useState } from 'react'
+import { EmojiPicker } from './emoji-picker'
+import { EmojiPickerGrid } from './emoji-picker-grid'
+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card'
+import { Label } from './ui/label'
+
+export function EmojiPickerExample() {
+	const [selectedEmoji1, setSelectedEmoji1] = useState<string | undefined>(undefined)
+	const [selectedEmoji2, setSelectedEmoji2] = useState<string | undefined>(undefined)
+	const [selectedEmoji3, setSelectedEmoji3] = useState<string | undefined>(undefined)
+
+	const { data: emojis1 } = useQuery(DiscordClient.getEmojisBaseQuery())
+	const { data: emojis2 } = useQuery(DiscordClient.getEmojisBaseQuery())
+	const { data: emojis3 } = useQuery(DiscordClient.getEmojisBaseQuery())
+
+	return (
+		<div className="container mx-auto py-8 space-y-8">
+			<div>
+				<h1 className="text-3xl font-bold mb-2">Emoji Picker Components</h1>
+				<p className="text-muted-foreground">
+					Two variants for selecting guild emojis from Discord
+				</p>
+			</div>
+
+			<div className="grid gap-8 md:grid-cols-2">
+				<Card>
+					<CardHeader>
+						<CardTitle>List Picker</CardTitle>
+						<CardDescription>
+							Command palette style with searchable list
+						</CardDescription>
+					</CardHeader>
+					<CardContent className="space-y-4">
+						<div className="space-y-2">
+							<Label>Default (no empty option)</Label>
+							<EmojiPicker
+								value={selectedEmoji1}
+								onSelect={setSelectedEmoji1}
+								className="w-full"
+							/>
+							{selectedEmoji1 && emojis1 && (
+								<p className="text-sm text-muted-foreground">
+									Selected: <code>{emojis1.find(e => e.id === selectedEmoji1)?.name}</code>
+								</p>
+							)}
+						</div>
+
+						<div className="space-y-2">
+							<Label>With empty option allowed</Label>
+							<EmojiPicker
+								value={selectedEmoji2}
+								onSelect={setSelectedEmoji2}
+								className="w-full"
+								allowEmpty
+								placeholder="Choose an emoji or none..."
+							/>
+							{selectedEmoji2 && emojis2
+								? (
+									<p className="text-sm text-muted-foreground">
+										Selected: <code>{emojis2.find(e => e.id === selectedEmoji2)?.name}</code>
+									</p>
+								)
+								: (
+									<p className="text-sm text-muted-foreground">
+										No emoji selected
+									</p>
+								)}
+						</div>
+					</CardContent>
+				</Card>
+
+				<Card>
+					<CardHeader>
+						<CardTitle>Grid Picker</CardTitle>
+						<CardDescription>
+							Visual grid layout showing emoji images
+						</CardDescription>
+					</CardHeader>
+					<CardContent className="space-y-4">
+						<div className="space-y-2">
+							<Label>Grid layout</Label>
+							<EmojiPickerGrid
+								value={selectedEmoji3}
+								onSelect={setSelectedEmoji3}
+								className="w-full"
+								allowEmpty
+							/>
+							{selectedEmoji3 && emojis3
+								? (
+									<p className="text-sm text-muted-foreground">
+										Selected: <code>{emojis3.find(e => e.id === selectedEmoji3)?.name}</code>
+									</p>
+								)
+								: (
+									<p className="text-sm text-muted-foreground">
+										No emoji selected
+									</p>
+								)}
+						</div>
+
+						<div className="space-y-2">
+							<Label>Disabled state</Label>
+							<EmojiPickerGrid
+								value={selectedEmoji3}
+								onSelect={setSelectedEmoji3}
+								className="w-full"
+								disabled
+							/>
+						</div>
+					</CardContent>
+				</Card>
+			</div>
+
+			<Card>
+				<CardHeader>
+					<CardTitle>Props Reference</CardTitle>
+				</CardHeader>
+				<CardContent>
+					<div className="space-y-4 text-sm">
+						<div>
+							<h3 className="font-semibold mb-2">Common Props</h3>
+							<ul className="list-disc list-inside space-y-1 text-muted-foreground">
+								<li>
+									<code>value</code>: string | undefined - Currently selected emoji ID
+								</li>
+								<li>
+									<code>onSelect</code>: (emojiId: string | undefined) =&gt; void - Callback when emoji is selected
+								</li>
+								<li>
+									<code>className</code>: string - Additional CSS classes for the trigger button
+								</li>
+								<li>
+									<code>disabled</code>: boolean - Disable the picker
+								</li>
+								<li>
+									<code>placeholder</code>: string - Placeholder text when no emoji selected
+								</li>
+								<li>
+									<code>allowEmpty</code>: boolean - Allow clearing the selection
+								</li>
+								<li>
+									<code>emojiSize</code>: number - Size of emoji images in pixels (default: 32 for list, 64 for grid)
+								</li>
+							</ul>
+						</div>
+					</div>
+				</CardContent>
+			</Card>
+		</div>
+	)
+}
Index: src/components/emoji-picker-grid.tsx
===================================================================
diff --git a/src/components/emoji-picker-grid.tsx b/src/components/emoji-picker-grid.tsx
new file mode 100644
--- /dev/null	(revision 0426e9da1be28eb0123d8ece32694cbea490fbc3)
+++ b/src/components/emoji-picker-grid.tsx	(revision 0426e9da1be28eb0123d8ece32694cbea490fbc3)
@@ -0,0 +1,157 @@
+import { X } from 'lucide-react'
+import { useState } from 'react'
+
+import { Button } from '@/components/ui/button'
+import { Input } from '@/components/ui/input'
+import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'
+import { ScrollArea } from '@/components/ui/scroll-area'
+import { Spinner } from '@/components/ui/spinner'
+import { cn } from '@/lib/utils'
+import { getEmojiUrl } from '@/models/discord.models'
+import * as DiscordClient from '@/systems.client/discord.client'
+import { useQuery } from '@tanstack/react-query'
+
+export type EmojiPickerGridProps = {
+	value: string | undefined
+	onSelect: (emojiId: string | undefined) => void
+	className?: string
+	disabled?: boolean
+	placeholder?: string
+	allowEmpty?: boolean
+	emojiSize?: number
+}
+
+export function EmojiPickerGrid(props: EmojiPickerGridProps) {
+	const {
+		value,
+		onSelect,
+		className,
+		disabled = false,
+		placeholder = 'Select emoji...',
+		allowEmpty = false,
+		emojiSize = 64,
+	} = props
+
+	const [open, setOpen] = useState(false)
+	const [search, setSearch] = useState('')
+
+	const { data: emojis, isLoading } = useQuery(DiscordClient.getEmojisBaseQuery())
+
+	const selectedEmoji = emojis?.find((e) => e.id === value)
+
+	const filteredEmojis = emojis?.filter((emoji) =>
+		(emoji.name?.toLowerCase().includes(search.toLowerCase()) ?? false)
+		|| emoji.id.toLowerCase().includes(search.toLowerCase())
+	) ?? []
+
+	function handleSelect(emojiId: string | undefined) {
+		onSelect(emojiId)
+		setOpen(false)
+		setSearch('')
+	}
+
+	return (
+		<Popover modal={true} open={open} onOpenChange={setOpen}>
+			<PopoverTrigger asChild>
+				<Button
+					disabled={disabled}
+					variant="outline"
+					role="combobox"
+					className={cn('h-auto min-h-9 justify-start gap-2', className)}
+				>
+					{selectedEmoji
+						? (
+							<>
+								<img
+									src={getEmojiUrl(selectedEmoji, emojiSize)}
+									alt={selectedEmoji.name ?? selectedEmoji.id}
+									className="h-6 w-6 shrink-0"
+									crossOrigin="anonymous"
+								/>
+								<span className="truncate">{selectedEmoji.name ?? selectedEmoji.id}</span>
+							</>
+						)
+						: <span className="text-muted-foreground">{placeholder}</span>}
+				</Button>
+			</PopoverTrigger>
+			<PopoverContent className="w-[380px] p-0" align="start">
+				<div className="flex flex-col">
+					<div className="border-b p-3">
+						<Input
+							placeholder="Search emojis..."
+							value={search}
+							onChange={(e) => setSearch(e.target.value)}
+							rightElement={search && (
+								<Button
+									variant="ghost"
+									size="icon"
+									className="h-5 w-5"
+									onClick={() => setSearch('')}
+								>
+									<X className="h-3 w-3" />
+								</Button>
+							)}
+						/>
+					</div>
+					<ScrollArea className="h-[320px]">
+						{isLoading
+							? (
+								<div className="flex items-center justify-center py-12">
+									<Spinner />
+									<span className="ml-2 text-sm text-muted-foreground">Loading emojis...</span>
+								</div>
+							)
+							: filteredEmojis.length === 0
+							? (
+								<div className="flex items-center justify-center py-12">
+									<span className="text-sm text-muted-foreground">No emojis found</span>
+								</div>
+							)
+							: (
+								<div className="p-3">
+									<div className="grid grid-cols-6 gap-2">
+										{allowEmpty && (
+											<button
+												type="button"
+												onClick={() => handleSelect(undefined)}
+												className={cn(
+													'flex aspect-square items-center justify-center rounded-md border-2 transition-colors hover:bg-accent',
+													value === undefined
+														? 'border-primary bg-accent'
+														: 'border-transparent',
+												)}
+												title="None"
+											>
+												<X className="h-6 w-6 text-muted-foreground" />
+											</button>
+										)}
+										{filteredEmojis.map((emoji) => (
+											<button
+												key={emoji.id}
+												type="button"
+												onClick={() => handleSelect(emoji.id)}
+												className={cn(
+													'flex aspect-square items-center justify-center rounded-md border-2 transition-colors hover:bg-accent',
+													value === emoji.id
+														? 'border-primary bg-accent'
+														: 'border-transparent',
+												)}
+												title={emoji.name ?? emoji.id}
+											>
+												<img
+													src={getEmojiUrl(emoji, emojiSize)}
+													alt={emoji.name ?? emoji.id}
+													className="h-8 w-8"
+													crossOrigin="anonymous"
+												/>
+											</button>
+										))}
+									</div>
+								</div>
+							)}
+					</ScrollArea>
+				</div>
+			</PopoverContent>
+		</Popover>
+	)
+}
Index: src/components/emoji-picker.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/emoji-picker.tsx b/src/components/emoji-picker.tsx
new file mode 100644
--- /dev/null	(revision 0426e9da1be28eb0123d8ece32694cbea490fbc3)
+++ b/src/components/emoji-picker.tsx	(revision 0426e9da1be28eb0123d8ece32694cbea490fbc3)
@@ -0,0 +1,136 @@
+import { Check, LoaderCircle } from 'lucide-react'
+import { useState } from 'react'
+
+import { Button } from '@/components/ui/button'
+import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from '@/components/ui/command'
+import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'
+import { ScrollArea } from '@/components/ui/scroll-area'
+import { cn } from '@/lib/utils'
+import { getEmojiUrl } from '@/models/discord.models'
+import * as DiscordClient from '@/systems.client/discord.client'
+import { useQuery } from '@tanstack/react-query'
+
+export type EmojiPickerProps = {
+	value: string | undefined
+	onSelect: (emojiId: string | undefined) => void
+	className?: string
+	disabled?: boolean
+	placeholder?: string
+	allowEmpty?: boolean
+	emojiSize?: number
+}
+
+export function EmojiPicker(props: EmojiPickerProps) {
+	const {
+		value,
+		onSelect,
+		className,
+		disabled = false,
+		placeholder = 'Select emoji...',
+		allowEmpty = false,
+		emojiSize = 32,
+	} = props
+
+	const [open, setOpen] = useState(false)
+	const [search, setSearch] = useState('')
+
+	const { data: emojis, isLoading } = useQuery(DiscordClient.getEmojisBaseQuery())
+
+	const selectedEmoji = emojis?.find((e) => e.id === value)
+
+	const filteredEmojis = emojis?.filter((emoji) =>
+		(emoji.name?.toLowerCase().includes(search.toLowerCase()) ?? false)
+		|| emoji.id.toLowerCase().includes(search.toLowerCase())
+	) ?? []
+
+	function handleSelect(emojiId: string | undefined) {
+		onSelect(emojiId)
+		setOpen(false)
+		setSearch('')
+	}
+
+	return (
+		<Popover modal={true} open={open} onOpenChange={setOpen}>
+			<PopoverTrigger asChild>
+				<Button
+					disabled={disabled}
+					variant="outline"
+					role="combobox"
+					className={cn('w-[200px] justify-between', className)}
+				>
+					{selectedEmoji
+						? (
+							<span className="flex items-center gap-2">
+								<img
+									src={getEmojiUrl(selectedEmoji, emojiSize)}
+									alt={selectedEmoji.name ?? selectedEmoji.id}
+									className="h-5 w-5"
+									crossOrigin="anonymous"
+								/>
+								<span className="truncate">{selectedEmoji.name ?? selectedEmoji.id}</span>
+							</span>
+						)
+						: <span>{placeholder}</span>}
+				</Button>
+			</PopoverTrigger>
+			<PopoverContent className="w-[300px] p-0">
+				<Command shouldFilter={false}>
+					<CommandInput
+						placeholder="Search emojis..."
+						value={search}
+						onValueChange={setSearch}
+					/>
+					<CommandList>
+						<CommandEmpty>No emoji found.</CommandEmpty>
+						<ScrollArea className="h-[300px]">
+							<CommandGroup>
+								{isLoading && (
+									<CommandItem>
+										<LoaderCircle className="mr-2 h-4 w-4 animate-spin" />
+										<span>Loading emojis...</span>
+									</CommandItem>
+								)}
+								{allowEmpty && !isLoading && (
+									<CommandItem
+										value="none"
+										onSelect={() => handleSelect(undefined)}
+									>
+										<Check
+											className={cn(
+												'mr-2 h-4 w-4',
+												value === undefined ? 'opacity-100' : 'opacity-0',
+											)}
+										/>
+										<span className="text-muted-foreground">None</span>
+									</CommandItem>
+								)}
+								{!isLoading
+									&& filteredEmojis.map((emoji) => (
+										<CommandItem
+											key={emoji.id}
+											value={emoji.name ?? emoji.id}
+											onSelect={() => handleSelect(emoji.id)}
+										>
+											<Check
+												className={cn(
+													'mr-2 h-4 w-4',
+													value === emoji.id ? 'opacity-100' : 'opacity-0',
+												)}
+											/>
+											<img
+												src={getEmojiUrl(emoji, emojiSize)}
+												alt={emoji.name ?? emoji.id}
+												className="mr-2 h-6 w-6"
+												crossOrigin="anonymous"
+											/>
+											<span>{emoji.name ?? emoji.id}</span>
+										</CommandItem>
+									))}
+							</CommandGroup>
+						</ScrollArea>
+					</CommandList>
+				</Command>
+			</PopoverContent>
+		</Popover>
+	)
+}
Index: src/components/layer-source-display.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/layer-source-display.tsx b/src/components/layer-source-display.tsx
--- a/src/components/layer-source-display.tsx	(revision d1b80a7d5ed84416d5b228214cab11d3512be9d7)
+++ b/src/components/layer-source-display.tsx	(revision 0426e9da1be28eb0123d8ece32694cbea490fbc3)
@@ -18,7 +18,6 @@
 	const userRes = UsersClient.useUser(userId, { enabled: !!userId && !userPartial && !isMe })
 	const user: USR.User | undefined = (userRes.data?.code === 'ok' ? userRes.data.user : undefined) ?? userPartial ?? loggedInUser
 	const username = user?.displayName ?? 'Unknown'
-	const avatarUrl = user ? USR.getAvatarUrl(user) : undefined
 
 	const renderAvatar = (
 		displayName: string,
@@ -34,7 +33,7 @@
 					style={{ backgroundColor: backgroundColor ?? undefined }}
 					className="h-6 w-6"
 				>
-					{typeof avatar === 'string' && <AvatarImage src={avatar} />}
+					{typeof avatar === 'string' && <AvatarImage src={avatar} crossOrigin="anonymous" />}
 					<AvatarFallback className="text-xs">
 						{initials}
 					</AvatarFallback>
Index: src/components/user-presence-panel.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/user-presence-panel.tsx b/src/components/user-presence-panel.tsx
--- a/src/components/user-presence-panel.tsx	(revision d1b80a7d5ed84416d5b228214cab11d3512be9d7)
+++ b/src/components/user-presence-panel.tsx	(revision 0426e9da1be28eb0123d8ece32694cbea490fbc3)
@@ -125,7 +125,7 @@
 													isEditing && 'ring-2 ring-blue-500 ring-offset-0',
 												)}
 											>
-												<AvatarImage src={USR.getAvatarUrl(user)} />
+												<AvatarImage src={USR.getAvatarUrl(user)} crossOrigin="anonymous" />
 												<AvatarFallback className="text-xs">
 													{getUserInitials(user)}
 												</AvatarFallback>
Index: src/models/discord.models.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/models/discord.models.ts b/src/models/discord.models.ts
new file mode 100644
--- /dev/null	(revision 0426e9da1be28eb0123d8ece32694cbea490fbc3)
+++ b/src/models/discord.models.ts	(revision 0426e9da1be28eb0123d8ece32694cbea490fbc3)
@@ -0,0 +1,25 @@
+import * as D from 'discord.js'
+import { z } from 'zod'
+
+export type MiniGuildEmoji = {
+	id: string
+	name: string | null
+}
+
+export function getMiniGuildEmoji(emoji: D.GuildEmoji): MiniGuildEmoji {
+	return {
+		id: emoji.id,
+		name: emoji.name,
+	}
+}
+
+export function getEmojiUrl(emoji: MiniGuildEmoji, size: number = 32): string {
+	return `https://cdn.discordapp.com/emojis/${emoji.id}.webp?size=${size}`
+}
+
+export const GetEmojisOptionsSchema = z.object({}).optional()
+
+export type GetEmojisOptions = z.infer<typeof GetEmojisOptionsSchema>
+
+export const GetEmojiOptionsSchema = z.object({ id: z.string() })
+export type GetEmojiOptions = z.infer<typeof GetEmojiOptionsSchema>
Index: src/models/users.models.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/models/users.models.ts b/src/models/users.models.ts
--- a/src/models/users.models.ts	(revision d1b80a7d5ed84416d5b228214cab11d3512be9d7)
+++ b/src/models/users.models.ts	(revision 0426e9da1be28eb0123d8ece32694cbea490fbc3)
@@ -50,10 +50,9 @@
 export type UserId = z.infer<typeof UserIdSchema>
 
 export const getAvatarUrl = (user: User) => {
-	let avatar: string
-	if (user.avatar) avatar = user.avatar
-	else avatar = ((user.discordId >> 22n) % 6n).toString()
-	return AR.link('/avatars/:discordId/:avatarId', user.discordId.toString(), avatar)
+	if (user.avatar) return `https://cdn.discordapp.com/avatars/${user.discordId}/${user.avatar}.png`
+	const id = ((user.discordId >> 22n) % 6n).toString()
+	return `https://cdn.discordapp.com/embed/avatars/${id}.png`
 }
 
 export const getUserInitials = (user: User) => {
Index: src/server/router.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/server/router.ts b/src/server/router.ts
--- a/src/server/router.ts	(revision d1b80a7d5ed84416d5b228214cab11d3512be9d7)
+++ b/src/server/router.ts	(revision 0426e9da1be28eb0123d8ece32694cbea490fbc3)
@@ -1,4 +1,5 @@
 import * as Config from '@/server/config.ts'
+import * as Discord from '@/server/systems/discord.ts'
 import * as ServerSettings from '@/server/systems/server-settings.ts'
 import * as SharedLayerList from '@/server/systems/shared-layer-list.server.ts'
 import * as FilterEntity from './systems/filter-entity.ts'
@@ -27,6 +28,7 @@
 		layerQueries: LayerQueries.layerQueriesRouter,
 		sharedLayerList: SharedLayerList.router,
 		serverSettings: ServerSettings.router,
+		discord: Discord.router,
 	})
 
 	appRouter = _appRouter
Index: src/server/systems/discord.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/server/systems/discord.ts b/src/server/systems/discord.ts
--- a/src/server/systems/discord.ts	(revision d1b80a7d5ed84416d5b228214cab11d3512be9d7)
+++ b/src/server/systems/discord.ts	(revision 0426e9da1be28eb0123d8ece32694cbea490fbc3)
@@ -1,7 +1,8 @@
+import { resToOptional } from '@/lib/types'
 import * as CS from '@/models/context-shared'
+import { getMiniGuildEmoji } from '@/models/discord.models'
 import { CONFIG } from '@/server/config'
-import * as C from '@/server/context'
-import * as Otel from '@opentelemetry/api'
+import * as TrpcServer from '@/server/trpc.server'
 import * as D from 'discord.js'
 import { z } from 'zod'
 import * as Env from '../env'
@@ -112,15 +113,29 @@
 	return { code: 'ok' as const, roles: Object.keys(rolesMap) }
 }
 
-// export async function getDiscordUserRoles(_ctx: CS.Log, discordId: bigint) {
-//   await using ctx = C.pushOperation(_ctx, 'discord:get-user-roles')
-//   const roles = new Set<string>()
-//   for (const authorized of CONFIG.authorizedDiscordRoles) {
-//     const res = await fetchMember(ctx, BigInt(authorized.serverId), discordId)
-//     if (res.code !== 'ok') return res
-//     for (const role of res.member.roles.cache.values()) {
-//       roles.add(role.id)
-//     }
-//   }
-//   return { code: 'ok' as const, roles: Array.from(roles) }
-// }
+export async function fetchIcons(ctx: CS.Log) {
+}
+
+export const router = TrpcServer.router({
+	getEmojis: TrpcServer.procedure.input(z.object({}).optional()).query(
+		async ({ ctx }) => {
+			const guildRes = await fetchGuild(ctx, CONFIG.homeDiscordGuildId)
+			const guild = resToOptional(guildRes)!.guild
+			let emojis = await guild.emojis.fetch()
+			return emojis.map(emoji => getMiniGuildEmoji(emoji))
+		},
+	),
+	getEmoji: TrpcServer.procedure.input(z.object({ id: z.string() })).query(
+		async ({ ctx, input }) => {
+			const guildRes = await fetchGuild(ctx, CONFIG.homeDiscordGuildId)
+			const guild = resToOptional(guildRes)!.guild
+			let emoji
+			try {
+				emoji = await guild.emojis.fetch(input.id)
+			} catch (err) {
+				return null
+			}
+			return emoji ? getMiniGuildEmoji(emoji) : null
+		},
+	),
+})
Index: src/systems.client/discord.client.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/systems.client/discord.client.ts b/src/systems.client/discord.client.ts
new file mode 100644
--- /dev/null	(revision 0426e9da1be28eb0123d8ece32694cbea490fbc3)
+++ b/src/systems.client/discord.client.ts	(revision 0426e9da1be28eb0123d8ece32694cbea490fbc3)
@@ -0,0 +1,17 @@
+import { trpc } from '@/trpc.client'
+
+export const getEmojisBaseQuery = () => {
+	return ({
+		queryKey: ['discord', 'getEmojis'],
+		queryFn: async () => {
+			return await trpc.discord.getEmojis.query()
+		},
+	})
+}
+
+export const getEmojiBaseQuery = (id: string) => ({
+	queryKey: ['discord', 'getEmoji', id],
+	queryFn: async () => {
+		return await trpc.discord.getEmoji.query({ id })
+	},
+})
