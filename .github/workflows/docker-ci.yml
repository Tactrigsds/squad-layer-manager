name: Docker Image CI
# Allow writing to GitHub Packages
permissions:
  contents: read
  packages: write

on:
  push:
    branches: ["main", "dev"]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get branch name and all branches containing commit
        id: branch
        run: |
          if [[ $GITHUB_EVENT_NAME == 'pull_request' ]]; then
            BRANCH_NAME=$(echo ${GITHUB_HEAD_REF})
          else
            BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})
          fi

          if [[ "$BRANCH_NAME" =~ [A-Z] ]]; then
            echo "Error: Branch name must be lowercase"
            exit 1
          fi

          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT

          # Get all branches that contain the current commit
          git fetch --all
          ALL_BRANCHES=$(git branch -r --contains ${{ github.sha }} | grep -v HEAD | sed 's/origin\///' | tr '\n' ',' | sed 's/,$//')
          echo "ALL_BRANCHES=$ALL_BRANCHES" >> $GITHUB_OUTPUT

          # Create colon-delimited list for GIT_BRANCH build arg
          BRANCHES_LIST=$(git branch -r --contains ${{ github.sha }} | grep -v HEAD | sed 's/origin\///' | tr '\n' ':' | sed 's/:$//')
          echo "BRANCHES_LIST=$BRANCHES_LIST" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get lowercase repository owner
        id: owner
        run: |
          OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "name=$OWNER" >> $GITHUB_OUTPUT

      - name: Build and tag Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GIT_SHA=${{ github.sha }}
            GIT_BRANCH=${{ github.ref_name }}
      - name: Generate tags for all branches
        id: tags
        run: |
          OWNER="${{ steps.owner.outputs.name }}"
          COMMIT_SHA="${{ github.sha }}"
          CURRENT_BRANCH="${{ steps.branch.outputs.BRANCH_NAME }}"
          ALL_BRANCHES="${{ steps.branch.outputs.ALL_BRANCHES }}"

          TAGS=""

          # Always add commit tag
          TAGS="ghcr.io/$OWNER/squad-layer-manager:commit-$COMMIT_SHA"

          # Add latest tag if main branch is in the branches containing this commit
          if [[ "$ALL_BRANCHES" == *"main"* ]]; then
            TAGS="$TAGS,ghcr.io/$OWNER/squad-layer-manager:latest"
          fi

          # Add tag for each branch containing this commit
          IFS=',' read -ra BRANCH_ARRAY <<< "$ALL_BRANCHES"
          for branch in "${BRANCH_ARRAY[@]}"; do
            # Skip empty entries and clean up whitespace
            branch=$(echo "$branch" | xargs)
            if [[ -n "$branch" && "$branch" != "main" ]]; then
              TAGS="$TAGS,ghcr.io/$OWNER/squad-layer-manager:branch-$branch"
            fi
          done

          # Add tag for current branch if it's different and not already covered
          if [[ "$CURRENT_BRANCH" != "main" && "$ALL_BRANCHES" != *"$CURRENT_BRANCH"* ]]; then
            TAGS="$TAGS,ghcr.io/$OWNER/squad-layer-manager:branch-$CURRENT_BRANCH"
          fi

          # Handle pull request tags
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            TAGS="$TAGS,ghcr.io/$OWNER/squad-layer-manager:latest-$CURRENT_BRANCH"
          fi

          # Handle tag releases
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG_NAME="${{ github.ref_name }}"
            TAGS="$TAGS,ghcr.io/$OWNER/squad-layer-manager:$TAG_NAME"
          fi

          echo "TAGS=$TAGS" >> $GITHUB_OUTPUT

      - name: Build and tag Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GIT_SHA=${{ github.sha }}
            GIT_BRANCH=${{ steps.branch.outputs.BRANCHES_LIST }}
          tags: ${{ steps.tags.outputs.TAGS }}
